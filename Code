import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class TicTacToe {
	
	static ArrayList<Integer> player1Positions = new ArrayList<Integer>();
	static ArrayList<Integer> player2Positions = new ArrayList<Integer>();
	
	
	
	public static void main(String[] args) {
		
		char [] [] board = {{' ', '|', ' ', '|', ' '},
							{'-', '+', '-', '+', '-'},
							{' ', '|', ' ', '|', ' '},
							{'-', '+', '-', '+', '-'},
							{' ', '|', ' ', '|', ' '}};
		boardPrint(board);
		
		
		while(true) {
				
				Scanner scan = new Scanner(System.in);
				System.out.println("Your Move Player 1, enter a number 1-9 to indicate your placement: ");
				int playerPos = scan.nextInt();
				
				while(player1Positions.contains(playerPos) || player2Positions.contains(player1Positions)) {
					System.out.println("Already used, please pick another position.");
					playerPos = scan.nextInt();
				}
				
				placement(board, playerPos, "player");
				String winner = winnerCheck();
				
				boardPrint(board);
				
				if(winner.length() > 0) {
					System.out.println(winner);
					break;
				}
				
				
				Scanner scan2 = new Scanner(System.in);
				System.out.println("Your Move Player 2, enter a number 1-9 to indicate your placement: ");
				int Player2 = scan.nextInt();
				
				while(player1Positions.contains(Player2) || player2Positions.contains(Player2)) {
					System.out.println("Already used, please pick another position.");
					Player2 = scan.nextInt();
				}
				
				placement(board, Player2, "computer");
				winner = winnerCheck();
				
				boardPrint(board);
				
				
				if(winner.length() > 0) {
					System.out.println(winner);
					break;
				}
				
				System.out.println(winner);
			
			
		}
		
	}

	public static void boardPrint(char[] [] board) {
		
		for(char[] row : board) {
			for(char c : row) {
				System.out.print(c);
			}
			System.out.println();
		}
	}
	
	public static void placement(char[][] board, int pos, String user) {
		
		char symbol = ' ';
		
		if(user.equals("player")) {
			symbol = 'X';
			player1Positions.add(pos);
			
		} else if(user.equals("computer")) {
			symbol = '0';
			player2Positions.add(pos);
			
		}
		
		switch(pos) {
			case 1: 
				board[0][0] = symbol;
				break;
			case 2: 
				board[0][2] = symbol;
				break;
			case 3: 
				board[0][4] = symbol;
				break;
			case 4: 
				board[2][0] = symbol;
				break;
			case 5: 
				board[2][2] = symbol;
				break;
			case 6: 
				board[2][4] = symbol;
				break;
			case 7: 
				board[4][0] = symbol;
				break;
			case 8: 
				board[4][2] = symbol;
				break;
			case 9: 
				board[4][4] = symbol;
				break;
				
		}
	}
	
	public static String winnerCheck() {
		
		List topRow = Arrays.asList(1, 2, 3);
		List middleRow = Arrays.asList(4, 5, 6);
		List bottomRow = Arrays.asList(7, 8, 9);
		
		List leftColumn = Arrays.asList(1, 4, 7);
		List middleColumn = Arrays.asList(2, 5, 8);
		List bottomColumn = Arrays.asList(3, 6, 9);
		
		List leftRightCross = Arrays.asList(1, 5, 9);
		List rightLeftCross = Arrays.asList(3, 5, 7);
		
		List<List> winner = new ArrayList<List>();
		winner.add(topRow);
		winner.add(middleRow);
		winner.add(bottomRow);
		
		winner.add(leftColumn);
		winner.add(middleColumn);
		winner.add(bottomColumn);
		
		winner.add(leftRightCross);
		winner.add(rightLeftCross);
		
		for(List l : winner) {
			
			if(player1Positions.containsAll(l)) {
				return "Player 1 Wins!";
			} 
			
			else if(player2Positions.containsAll(l)) {
				return "Player 2 Wins!";
			} 
			
			else if(player1Positions.size() + player2Positions.size() == 9) {
				return "Draw!";
			}
			
		}
		
		return"";
	}
	
}






